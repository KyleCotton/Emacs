#+STARTUP: hidestars
#+AUTHOR: Kyle Cotton
#+TITLE: Emacs Configuration File
* Emacs Configuration File
** Notes & Tips
*** Editing Code
When editing code use (C-c ') to open the source block in a new buffer make editing much easier.
*** Useful Links
Below are some useful links.
[[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
[[https://cestlaz.github.io/stories/emacs/][Using Emacs Video Series]]
[[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Using Emacs GitHub]]
*** Tramp
    Tramp is used to access and change files over ssh [[https://youtu.be/Iqh50fgbIVk][Tramp Tutorial]].
** Configuration Setup/Use-Package

Use package makes it very easy to install other emacs packages from your configuration file.

#+BEGIN_SRC emacs-lisp

(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

(unless (package-installed-p 'bind-key)
  (package-refresh-contents)
  (package-install 'bind-key))

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

** Interface Tweaks
*** THEME
#+BEGIN_SRC emacs-lisp
;(use-package dakrone-theme
;        :ensure t
;        :config (load-theme 'dakrone-theme)

(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
#+END_SRC
*** Disable Startup Message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

*** Disable Tool Bar
This code disables the tool bar to have a cleaner UI
#+BEGIN_SRC emacs-lisp
;Remove Tool Bar
(tool-bar-mode -1)  

;Enable Tool Bar
;(tool-bar-mode 1)
#+END_SRC

*** Line Numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC
*** Confirmation Messages
Change the standard Yes/No messages to Y/N

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Revert Buffer Keyboard Shortcut
When F5 is pressed on the keyboard the buffer is reloaded from the file on disk.
This loads any code and also destroyes and unsaved changes.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
*** Highlight Current Line
Finish this code, the highlighted text should be a differnt colour.
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  (set-face-attribute 'region nil :background "#666" :foreground "#ffffff")
  ;(set-face-background 'hl-line "#000000")
  ;(set-face-attribute 'region nil :background "#666")
  ;(set-face-background '
  ;(set-fshace-foreground 'highlight 0)
  ;(set-face-attribute 'region nil :background "#00ff2e")
#+END_SRC
*** Mode Line
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

#+BEGIN_SRC 
(use-package smart-mode-line)
#+END_SRC
** Org Mode
*** Agenda
#+BEGIN_SRC emacs-lisp
  ;Location of org files
  ;~/Dropbox/OrgFiles/

  (setq org-agenda-files '("~/Dropbox/OrgFiles"))

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "WAITING(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCELLED(c`)"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("SOMEDAY" :foreground "orange" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold))))

  (global-set-key (kbd "C-c c")
                  'org-capture)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
#+END_SRC
    
*** Capturing
#+BEGIN_SRC emacs-lisp
  ;; (setq org-capture-templates
  ;;       '(("t" "TODO Item" entry (file  "~/Dropbox/OrgFiles/i.org" "TODO Item")
  ;;          "* TODO %?\nDEADLINE: %^T \n %i\n")))

  (setq org-capture-templates
        '(("t" "To Do Item" entry (file+headline "~/Dropbox/OrgFiles/i.org" "Tasks")
           "* TODO %?\n\nDEADLINE: %^T\n" :prepend t)))
#+END_SRC
    
*** MobileOrg
#+BEGIN_SRC emacs-lisp
  ;; mobileorg settings
  (setq org-directory "~/Dropbox/OrgFiles")
  (setq org-mobile-inbox-for-pull "~/Dropbox/OrgFiles/inbox.org")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-mobile-files '("~/Dropbox/OrgFiles"))
#+END_SRC


** Packages
*** Try
Allow you to try packages without installing them, one you quit emacs it is lost
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)

(use-package which-key
	:ensure t
	:config
	(which-key-mode))
#+END_SRC

*** Relitive Line Numbers

#+BEGIN_SRC emacs-lisp
;(use-package linum-relative
;	:ensure t
;	:config
;	(linum-on))
#+END_SRC

*** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:ensure t
	:config
	(which-key-mode))
#+END_SRC

*** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets 
	:ensure t
	:config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
    
*** Counsel
The code for using the keyring better (cutting and pasting)

M-y    :Key Combination (Cycle through kill ring)
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  ; (use-package counsel
  ;   :ensure t
  ;   )

#+END_SRC
*** Swiper

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

*** Avy
This package makes navigating visible text easy, replacing the searching character will another for that location.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC
*** Ido Mode
Using ido only for the new window displaying all buffers

Enables the 'Iteractive Do Mode' everywhere.
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

Change the defult list buffer to the ido list buffer.

C-x C-b    :Key Combination
#+BEGIN_SRC emacs-lisp
;Changes the current window to a buffer selection
(defalias 'list-buffers 'ibuffer) ; make ibuffer default

;Makes a new windows to select the buffer
;(defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC

*** Auto-Complete
Autocomplete drop down list.
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC
*** Ace Window
Ace window allows for easy switching of windows, putting a number in the window.
C-x o    :Key Combination
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
#+END_SRC

*** Winner Mode
Winner mode allow you to undo and redo, window changes
C-c left, C-c right    :Key Combination 
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
*** Undo Tree
Allow me to visualise the undo/redo I have done.

C-x u    :Key Combination (View Tree)
C-/      :Key Combination (Undo)
C-<shift>-/    :Key Combination (Redo) 

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC
*** Expand Region
Expands the marked region in semantic increments (negative prefix to reduce region).

C-=    :Key Combination (Increase Selection)
C--    :Key Combination (Decrease Selection)
C-g    :Key Combination (Quit Selection)

#+BEGIN_SRC emacs-lisp
(use-package expand-region
:ensure t
:config 
(global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

*** Yasnippet
Now fully working, added all the available snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Snippets Github]].
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
*** Iedit & Narrow/Widen
Narrows the current buffer to the selected reigon

C-x n    :Key Combination (Toggle Narrowing/Widening)
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  ;(define-key endless/toggle-map "n" #'narrow-or-widen-dwim)

  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map "\C-xn"
                nil)))

#+END_SRC
** Misc
*** Accessing '#' on MacOS
Fixed issue where the '#' couldn't be accessed on MacOS.
The right hand side option key is now release from emacs.
#+BEGIN_SRC emacs-lisp
(setq ns-right-alternate-modifier (quote none))
#+END_SRC

*** Changing the location of backup files
This changes saves all backup files to a single directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
  ;/Users/kyle/.emacs.d/backup
#+END_SRC
*** Kill Ring/System Clipboard
When exiting the contents of the kill ring are transfered to the system clipboard
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

*** Buffer Reloads After Change to file
If there is a change to the file, the buffer will be reloaded with the latest version from the disk.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
#+END_SRC

** External Files
If I want to use external files at a later date, use code below.

#+BEGIN_SRC emacs-lisp
  ;; (defun load-file-if-exists (f)
  ;;   "If the file exists and is readable if will be loaded, this is to stop errors."
  ;;   (if (file-readable-p f)
  ;;       (load-file f)))

  ;;EXAMPLE USAGE
  ;; (load-file-if-exists "file paths here")
#+END_SRC
** Code Archive
   Collection of all previous code that is no longer used, but I have keeped just in case
