#+STARTUP: hidestars
#+AUTHOR: Kyle Cotton
#+TITLE: Emacs Configuration File
* Emacs Configuration File
** Notes & Tips
*** Common Fixes
**** Evaluation of this Emacs-Lisp code block is disabled 
Delete all the *.elc files in the org package directory and restart emacs
#+BEGIN_SRC bash
  # cd .emacs.d/
  # cd elpa/org/
  # rm *.elc
#+END_SRC
*** Editing Code
When editing code use (C-c ') to open the source block in a new buffer make editing much easier.
*** Useful Links
Below are some useful links.
[[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
[[https://cestlaz.github.io/stories/emacs/][Using Emacs Video Series]]
[[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Using Emacs GitHub]]
*** Tramp
    Tramp is used to access and change files over ssh [[https://youtu.be/Iqh50fgbIVk][Tramp Tutorial]].
*** External Files
If I want to use external files at a later date, use code below.

#+BEGIN_SRC emacs-lisp
  ;; (defun load-file-if-exists (f)
  ;;   "If the file exists and is readable if will be loaded, this is to stop errors."
  ;;   (if (file-readable-p f)
  ;;       (load-file f)))

  ;;EXAMPLE USAGE
  ;; (load-file-if-exists "file paths here")
#+END_SRC

** DONE Initial Configuration/Setup 
These configuratons must take place first to ensure to errors occur.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))
#+END_SRC
*** Default Text Size (Zoom)
Sets the default zoom of emacs.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 155)
#+END_SRC

*** Clear Buffers List
Clears the list of buffers when emacs starts
#+BEGIN_SRC emacs-lisp
  (setq ido-virtual-buffers '())
  (setq recentf-list '())
#+END_SRC

*** Package Archives
#+BEGIN_SRC emacs-lisp
  (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives
		 '("melpa" . "http://melpa.org/packages/")t)

    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
*** Use Package
Use package makes it very easy to install other emacs packages from your configuration file.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (unless (package-installed-p 'bind-key)
    (package-refresh-contents)
    (package-install 'bind-key))

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
*** Use server mode
#+BEGIN_SRC emacs-lisp
  (server-mode t)
#+END_SRC
*** Backup Files
**** Location of backup files
This changes saves all backup files to a single directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
  ;/Users/kyle/.emacs.d/backup
#+END_SRC
*** Releasing Keys From Emacs
Fixed issue where the '#' couldn't be accessed on MacOS.
The right hand side option key is now release from emacs.
#+BEGIN_SRC emacs-lisp
  (setq ns-right-alternate-modifier (quote noneaa))
  (setq ns-right-option-modifier (quote none))
  (setq ns-right-command-modifier (quote none))
  (setq ns-right-control-modifier (quote none))
#+END_SRC

*** Buffer Reloads After Change to file
If there is a change to the file, the buffer will be reloaded with the latest version from the disk.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
#+END_SRC

** DONE Org Mode
*** DONE Tags
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("SixthForm" . ?s) ("University" . ?u) ("Personal" . ?p)))
#+END_SRC

*** DONE Clocking
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'auto-mode-alist '("\.org_archive\'" . org-mode))
  (setq org-clock-into-drawer t)
#+END_SRC
*** DONE HTML Exprt
#+BEGIN_SRC emacs-lisp
  (use-package htmlize 
	  :ensure t)
#+END_SRC

*** DONE Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets 
	  :ensure t
	  :config
	  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
    
Location of org files:
~/Dropbox/org/

#+BEGIN_SRC emacs-lisp
  ;; (use-package org
  ;;   :ensure org-plus-contrib
  ;;   :pin org)

#+END_SRC

*** DONE Agenda
Define the location of org Files
#+BEGIN_SRC emacs-lisp
  ;;(setq org-agenda-files '("~/Dropbox/org"))

  (setq org-agenda-files (list "/Users/kyle/Dropbox/org/life.org"
			       "/Users/kyle/Dropbox/org/inbox.org"
			       "/Users/kyle/Dropbox/org/gcal.org"))
#+END_SRC

Don't display done tasks
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-scheduled-if-done t)
#+END_SRC

Define the files that todos can be refiled to
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets
        '(("life.org" :maxlevel . 2)
          ("inbox.org" :maxlevel . 2)))
#+END_SRC

Define the archive location
#+BEGIN_SRC emacs-lisp
  ;;(setq org-archive-location "%s_archive::datetree/* Archived Tasks")
  (setq org-archive-location "%s_archive::datetree/")

#+END_SRC

Define the todos
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
	(quote ((sequence "TODO(t)" "WAITING(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCELLED(c)" "ARCHIVE(a)"))))

  (setq org-todo-keyword-faces
	(quote (("TODO" :foreground "red" :weight bold)
		("SOMEDAY" :foreground "orange" :weight bold)
		("DONE" :foreground "forest green" :weight bold)
		("WAITING" :foreground "orange" :weight bold)
		("CANCELLED" :foreground "forest green" :weight bold)
		("ARCHIVE" :foreground "forest green" :weight bold))))
#+END_SRC

Exporting Agenda Views 
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-exporter-settings
                  '((ps-number-of-columns 2)
                    (ps-landscape-mode t)
                    (org-agenda-add-entry-text-maxlines 5)
                    (htmlize-output-type 'css)))

#+END_SRC

Custom agenda views
#+BEGIN_SRC emacs-lisp
  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
	  (pri-value (* 1000 (- org-lowest-priority priority)))
	  (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
	  subtree-end
	nil)))

  (defun air-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
	  subtree-end
	nil)))

  (setq org-agenda-custom-commands
	'(("d" "Daily agenda and all TODOs"
	   ((tags "PRIORITY=\"A\""
		  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
		   (org-agenda-overriding-header "High-priority unfinished tasks:")))
	    (agenda "" ((org-agenda-ndays 1)))
	    (alltodo ""
		     ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
						     (air-org-skip-subtree-if-priority ?A)
						     (org-agenda-skip-if nil '(scheduled deadline))))
		      (org-agenda-overriding-header "ALL normal priority tasks:"))))
	   ((org-agenda-compact-blocks t)))))
#+END_SRC

*** DONE Todo
Automatically set the parent task done when all children are complete.
#+BEGIN_SRC emacs-lisp
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

#+END_SRC

*** DONE Capturing
Define key bindings for captures
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agendal)
  (setq org-log-done t)
  (setq org-agenda-skip-scheduled-if-done t)
#+END_SRC
**** Capture Templates
Define the capture templates.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	'(("t" "Quick Task" entry (file "~/Dropbox/org/inbox.org") "* TODO %^{Brief Task Description}\nSCHEDULED: %^t\n %^{Additional Details}" :prepend t)

	  ("n" "Note" entry (file+headline "~/Dropbox/org/life.org" "Notes") "* %^{Title}\n%?" :prepend t)

	  ("d" "Diary" entry (file+datetree "~/Dropbox/org/diary.org") "** %^{Entry Title}\n%?")

	  ("l" "Log Time" entry (file+datetree "~/Dropbox/org/time-log.org") "** %T - %^{Activity}")

	  ("e" "Event" entry (file  "~/Dropbox/org/gcal.org") "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")))

#+END_SRC

*** DONE Calendar
#+BEGIN_SRC emacs-lisp

  (setq package-check-signature nil)

    (use-package org-gcal
      :ensure t
      :config
      (setq org-gcal-client-id "771908957162-p4ckpjmkd0couakj9ma9ofsm72cuc3fd.apps.googleusercontent.com"
	    org-gcal-client-secret "QOVj0CDKslUfrRnEOrLQIl7B"
	    org-gcal-file-alist '(("kylecottonkc@gmail.com" .  "~/Dropbox/org/gcal.org"))))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-fetch)(org-gcal-sync) ))
  ;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC

*** Display Agenda in calender
[[https://github.com/kiwanami/emacs-calfw][GitHub]], [[https://cestlaz.github.io/posts/using-emacs-26-gcal/][Using Emacs Blog]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package calfw
  ;;   :ensure
  ;;   :config
  ;;   (require 'calfw) 
  ;;   (require 'calfw-org)
  ;;   (setq cfw:org-overwrite-default-keybinding t)
  ;;   (require 'calfw-ical)
  ;;   (setq cfw:org-agenda-schedule-args '(:timestamp))

  ;;   (defun mycalendar ()
  ;;     (interactive)
  ;;     (cfw:open-calendar-buffer
  ;;      :contents-sources
  ;;      (list
  ;;       (cfw:org-create-source "Green")  ; orgmode source
  ;;       (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/kylecottonkc%40gmail.com/private-0654e6f30775ca4e3e8c984faed2ffe6/basic.ics" "IndianRed") ; google calendar ICS
  ;;       ))) 
  ;;   (setq cfw:org-overwrite-default-keybinding t))

  ;; (use-package calfw-gcal
  ;; 	:ensure t
  ;; 	:config
  ;; 	(require 'calfw-gcal))
#+END_SRC

** DONE Interface Tweaks
*** THEME
[[https://github.com/hlissner/emacs-doom-themes/wiki][GitHub]]
#+BEGIN_SRC emacs-lisp
  ;  (use-package doom-theme
  ;    :ensure t)
  ;    :config (load-theme 'doom-city-lights t))

  ;;(load-theme 'doom-city-lights t)
  (load-theme 'doom-peacock t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config)

  ;; Enable custom neotree theme
  ;(doom-themes-neotree-config)  ; all-the-icons fonts must be installed!

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package dakrone-theme
  ;;   :ensure t
  ;;   :config (load-theme 'dakrone t))

  ;; ;; (use-package zenburn-theme
  ;; ;;   :ensure t
  ;; ;;   :config (load-theme 'zenburn t))
#+END_SRC

*** Disable Startup Message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

*** Disable Tool Bar
This code disables the tool bar to have a cleaner UI
#+BEGIN_SRC emacs-lisp
;Remove Tool Bar
(tool-bar-mode -1)  

;Enable Tool Bar
;(tool-bar-mode 1)
#+END_SRC

*** Line Numbers
**** Normal Line Numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC
**** Relitive Line Numbers
#+BEGIN_SRC emacs-lisp
  ;; (use-package linum-relative
  ;;        :ensure t
  ;;        :config
  ;;        (linum-relative-on))
#+END_SRC

*** Confirmation Messages
Change the standard Yes/No messages to Y/N

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Highlighting
**** Current Line Highlighting
High lights the currently selected line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
**** Text Highlighting
When a reigon of text is highlighgted the colour changes.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'region nil :background "#FFB400" :foreground "#000000")
  ;;(set-face-attribute 'region nil :background "#FFB400" :foreground "#ffffff")
#+END_SRC

*** Mode Line
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

#+BEGIN_SRC 
(use-package smart-mode-line)
#+END_SRC
**** Powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init
    (progn
      (require 'cl)
      (powerline-default-theme)
      (setq powerline-arrow-shape 'arrow)))
#+END_SRC

**** Airline Theme
Currently not working waititing for response on the [[https://github.com/AnthonyDiGirolamo/airline-themes/issues][issue]].
#+BEGIN_SRC emacs-lisp
  ;; (use-package airline-themes
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;;     (load-theme 'airline-dark)))
#+END_SRC

** DONE Navigation/Manipulation
*** File
**** Counsel
The code for using the keyring better (cutting and pasting)

M-y    :Key Combination (Cycle through kill ring)
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  ; (use-package counsel
  ;   :ensure t
  ;   )

#+END_SRC
**** Swiper

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)

      (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  ;    (global-set-key (kbd "C-x k") 'ivy-kill-buffer)

      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

**** Dired Sidebar
All the icons
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :config
    (use-package all-the-icons-dired
      ;; M-x all-the-icons-install-fonts
      :ensure t
      :commands (all-the-icons-dired-mode)))
#+END_SRC

*** Text
**** Avy
This package makes navigating visible text easy, replacing the searching character will another for that location.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
*** Window/Buffer Naviagtion
**** Ace Window
Ace window allows for easy switching of windows, putting a number in the window.
C-x o    :Key Combination
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))
#+END_SRC

**** Winner Mode
Winner mode allow you to undo and redo, window changes
C-c left, C-c right    :Key Combination 
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
**** Expand Region
Expands the marked region in semantic increments (negative prefix to reduce region).

C-=    :Key Combination (Increase Selection)
C--    :Key Combination (Decrease Selection)
C-g    :Key Combination (Quit Selection)

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config 
  (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
**** IBuffer
C-x C-b    :Key Combination
#+BEGIN_SRC emacs-lisp
;Changes the current window to a buffer selection
;(defalias 'list-buffers 'ibuffer) ; make ibuffer default

;Makes a new windows to select the buffer
(defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC
*** Undoing
**** Undo Tree
Allow me to visualise the undo/redo I have done.

C-x u    :Key Combination (View Tree)
C-/      :Key Combination (Undo)
C-<shift>-/    :Key Combination (Redo) 

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

#+RESULTS:

*** Killing/Copying
**** Kill Ring/System Clipboard
When exiting the contents of the kill ring are transfered to the system clipboard
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

** DONE Auto-Completion
*** Yasnippet
Now fully working, added all the available snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Snippets Github]].
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
*** Iedit & Narrow/Widen
Narrows the current buffer to the selected reigon

C-x n    :Key Combination (Toggle Narrowing/Widening)
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
	  ((region-active-p)
	   (narrow-to-region (region-beginning)
			     (region-end)))
	  ((derived-mode-p 'org-mode)
	   ;; `org-edit-src-code' is not a real narrowing
	   ;; command. Remove this first conditional if
	   ;; you don't want it.
	   (cond ((ignore-errors (org-edit-src-code) t)
		  (delete-other-windows))
		 ((ignore-errors (org-narrow-to-block) t))
		 (t (org-narrow-to-subtree))))
	  ((derived-mode-p 'latex-mode)
	   (LaTeX-narrow-to-environment))
	  (t (narrow-to-defun))))

  ;(define-key endless/toggle-map "n" #'narrow-or-widen-dwim)

  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

  (add-hook 'LaTeX-mode-hook
	    (lambda ()
	      (define-key LaTeX-mode-map "\C-xn"
		nil)))

#+END_SRC

*** Auto-Complete
Autocomplete drop down list.
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC
** DONE Help
*** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	  :ensure t
	  :config
	  (which-key-mode))
#+END_SRC
** DONE Development
*** Git
**** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)))
#+END_SRC

*** Emacs Configuration
**** Try
Allow you to try packages without installing them, one you quit emacs it is lost
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
